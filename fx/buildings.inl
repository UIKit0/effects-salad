_templates.resize(4);
_threadParams.resize(_templates.size());
FOR_EACH(p, _threadParams) {
    *p = (ThreadParams*) calloc(sizeof(ThreadParams), 1);
}
int i = 0;
_threadParams[i]->Thickness = 3;
_threadParams[i]->TopRadius =  8.0f / 13.0f;
_threadParams[i]->TetSize = 0.1f;
_threadParams[i]->NumSides = 5;
_threadParams[i]->CanExplode = _explode;
_threadParams[i]->Dest = &_templates[i];
_threadParams[i]->Windows.Columns = 2;
_threadParams[i]->Windows.Rows = 10;
_threadParams[i]->Windows.Size = glm::vec2(0.5);
_threadParams[i]->InsetDepth = 0.1;
++i;
_threadParams[i]->Thickness = 3.0f;
_threadParams[i]->TopRadius =  1.0f;
_threadParams[i]->TetSize = 0.1f;
_threadParams[i]->NumSides = 4;
_threadParams[i]->CanExplode = _explode;
_threadParams[i]->Windows.Columns = 3;
_threadParams[i]->Windows.Rows = 10;
_threadParams[i]->Windows.Size = glm::vec2(0.5);
_threadParams[i]->Dest = &_templates[i];
_threadParams[i]->InsetDepth = 0.1;
++i;
_threadParams[i]->Thickness = 3.0f;
_threadParams[i]->TetSize = 0.1f;
_threadParams[i]->TopRadius =  1.2f;
_threadParams[i]->NumSides = 3;
_threadParams[i]->CanExplode = _explode;
_threadParams[i]->Windows.Columns = 3;
_threadParams[i]->Windows.Rows = 10;
_threadParams[i]->Windows.Size = glm::vec2(0.5);
_threadParams[i]->Dest = &_templates[i];
_threadParams[i]->InsetDepth = 0.1;
++i;
_threadParams[i]->Thickness = 3.0f;
_threadParams[i]->TetSize = 0.1f;
_threadParams[i]->TopRadius = 1;
_threadParams[i]->NumSides = _explode ? 32 : 64;
_threadParams[i]->Windows.Columns = 0;
_threadParams[i]->Windows.Rows = 0;
_threadParams[i]->CanExplode = _explode;
_threadParams[i]->Dest = &_templates[i];
